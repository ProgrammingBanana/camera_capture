import cv2
import numpy as np
import os
from matplotlib import pyplot as plt
import time
import mediapipe as mp


# Setting up necessary mediapipe utils and model
# Mediapipe holistic model
mp_holistic = mp.solutions.holistic
# Drawing utilities
mp_drawing = mp.solutions.drawing_utils


def mediapipe_detection(image, model):
    """ Receives image and model and applies the necessary
        methods to process the image with mediapipe model received

    Args:
        image (CV2 image): Image captured from video frame
        model (Mediapipe model): Pre-trained Mediapipe Model

    Returns:
        image: original image
        results: model processing results
    """
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # converts color format from BGR to RGB
    image.flags.writeable = False                  # Image is no longer writeable
    results = model.process(image)                 # Apply mediapipe holistic model
    image.flags.writeable = True                   # Image is now  writeable
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR) # converts color format from RGB to BGR
    return image, results

# Draws the landmarks on each frame of the video
def draw_styled_landmarks(image, results):
    """ Takes in an image and the mediapipe results and 
        draws the landmarks on the image

    Args:
        image (CV2 image): Image captured from video frame
        results (Mediapipe solution output): Landmark data generated by Mediapipe model prediction
    """

    # VERIFY THIS INFORMATION
    # the last arguments is the type of connections to use when drawing
    # It shows what landmark is connected to what other landmark
    mp_drawing.draw_landmarks(image, results.face_landmarks, mp_holistic.FACE_CONNECTIONS,
                             mp_drawing.DrawingSpec(color=(230, 216, 173), thickness=1, circle_radius=1),
                             mp_drawing.DrawingSpec(color=(255, 121, 80), thickness=1, circle_radius=1))
    mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
                             mp_drawing.DrawingSpec(color=(230, 216, 173), thickness=2, circle_radius=4),
                             mp_drawing.DrawingSpec(color=(255, 121, 80), thickness=1, circle_radius=2))
    mp_drawing.draw_landmarks(image, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                             mp_drawing.DrawingSpec(color=(230, 216, 173), thickness=2, circle_radius=4),
                             mp_drawing.DrawingSpec(color=(255, 121, 80), thickness=1, circle_radius=2))
    mp_drawing.draw_landmarks(image, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                             mp_drawing.DrawingSpec(color=(230, 216, 173), thickness=2, circle_radius=4),
                             mp_drawing.DrawingSpec(color=(255, 121, 80), thickness=1, circle_radius=2))

# Connects to the webcam (the number can vary depending on machine)
cap = cv2.VideoCapture(0)

# TESTING THE FUNCTIONS WORKS 
# Set mediapipe model
with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:
    while cap.isOpened():
        
        # Read feed
        ret, frame = cap.read()
        
        # Make detections
        image, results = mediapipe_detection(frame, holistic)
        
        draw_styled_landmarks(image, results)
        
        # Show the camera feed
        cv2.imshow('OpenCV Camera Feed', image)
        
        # If pressing 'q' Quit the camera
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
    
    # Close video capture
    cap.release()
    cv2.destroyAllWindows()
    cv2.waitKey(1)